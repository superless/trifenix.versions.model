<?xml version="1.0"?>
<doc>
    <assembly>
        <name>trifenix.versions.model</name>
    </assembly>
    <members>
        <member name="T:trifenix.versions.model.CommitVersion">
            <summary>
            Detalles de un commit y su versión
            </summary>
        </member>
        <member name="P:trifenix.versions.model.CommitVersion.Branch">
            <summary>
            Rama del commit
            </summary>
        </member>
        <member name="P:trifenix.versions.model.CommitVersion.LastUpdate">
            <summary>
            Fecha en que se actualizó.
            </summary>
        </member>
        <member name="P:trifenix.versions.model.CommitVersion.SemanticBaseVersion">
            <summary>
            versión semántica.
            </summary>
        </member>
        <member name="P:trifenix.versions.model.CommitVersion.PreReleaseLabel">
            <summary>
            Label de la versión
            </summary>
        </member>
        <member name="P:trifenix.versions.model.CommitVersion.Preview">
            <summary>
            autonumérico que se incrementa, se usa en ramas que no son master.
            </summary>
        </member>
        <member name="P:trifenix.versions.model.CommitVersion.DependantRelease">
            <summary>
            Si una rama a modificar es dependant release, usará la versión del release.
            </summary>
        </member>
        <member name="P:trifenix.versions.model.CommitVersion.IsFeature">
            <summary>
            Indica si una rama es feature.
            </summary>
        </member>
        <member name="P:trifenix.versions.model.CommitVersion.Build">
            <summary>
            Build de azure devops
            </summary>
        </member>
        <member name="M:trifenix.versions.model.CommitVersion.ToString">
            <summary>
            genera la versión en string.
            </summary>
            <returns></returns>
        </member>
        <member name="P:trifenix.versions.model.Semantic.Major">
            <summary>
            Sección Major de la versión semántica
            </summary>
        </member>
        <member name="P:trifenix.versions.model.Semantic.Minor">
            <summary>
            Sección Minor de la versión semántica
            </summary>
        </member>
        <member name="P:trifenix.versions.model.Semantic.Patch">
            <summary>
            Sección Patch de la versión semántica
            </summary>
        </member>
        <member name="T:trifenix.versions.model.Dependency">
            <summary>
            Dependencia de un paquete
            (no usa el tipo de paquete, dado que se asume por la dependencia de VersionStructure)
            </summary>
        </member>
        <member name="P:trifenix.versions.model.Dependency.PackageName">
            <summary>
            Nombre del paquete dependiente
            </summary>
        </member>
        <member name="P:trifenix.versions.model.Dependency.GithubHttp">
            <summary>
            Repositorio del paquete en http
            </summary>
        </member>
        <member name="P:trifenix.versions.model.Dependency.GithubSsh">
            <summary>
            Repositorio del paquete en ssh.
            </summary>
        </member>
        <member name="P:trifenix.versions.model.Dependency.pathPackageSettings">
            <summary>
            Ruta del archivo donde se actualizará la versión.
            </summary>
        </member>
        <member name="T:trifenix.versions.model.Hash">
            <summary>
            Clase estática de hash para validar el modelo.
            candidata a ser un método global.
            </summary>
        </member>
        <member name="M:trifenix.versions.model.Hash.Serialize(System.Object)">
            <summary>
            Convierte cualquier objeto a json y luego a hash.
            </summary>
            <param name="element">element a hashear</param>
            <returns>hash del elemento</returns>
        </member>
        <member name="M:trifenix.versions.model.Hash.ComputeSha256Hash(System.String)">
            <summary>
            Crea un hash a partir de un string
            </summary>
            <param name="rawData">string que debe ser hasheado</param>
            <returns>hash</returns>
        </member>
        <member name="T:trifenix.versions.model.VersionStructure">
            <summary>
            Estructura de un paquete y sus versiones, a ser almacenada
            en en repositorio
            </summary>
        </member>
        <member name="P:trifenix.versions.model.VersionStructure.PackageName">
            <summary>
            Nombre del paquete.
            </summary>
        </member>
        <member name="P:trifenix.versions.model.VersionStructure.PackageType">
            <summary>
            Tipo del paquete (json / nuget).
            </summary>
        </member>
        <member name="P:trifenix.versions.model.VersionStructure.GithubHttp">
            <summary>
            repositorio de github del paquete en https.
            </summary>
        </member>
        <member name="P:trifenix.versions.model.VersionStructure.GithubSsh">
            <summary>
            Repositori del github del paquete en ssh.
            </summary>
        </member>
        <member name="P:trifenix.versions.model.VersionStructure.Versions">
            <summary>
            todas las versiones que se han generado.
            </summary>
        </member>
        <member name="P:trifenix.versions.model.VersionStructure.DependantVersions">
            <summary>
            Paquetes de los que depende.
            </summary>
        </member>
        <member name="P:trifenix.versions.model.VersionStructure.Dependencies">
            <summary>
            listado con los paquetes dependientes del paquete principal.
            </summary>
        </member>
        <member name="M:trifenix.versions.model.VersionStructure.Equals(trifenix.versions.model.VersionStructure)">
            <summary>
            Crea un hash para comparar un objeto versionStructure con otro.
            </summary>
            <param name="other">versionStructure a comparar</param>
            <returns>true si es igual el hash.</returns>
        </member>
    </members>
</doc>
